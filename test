
public class AesGcmDecryptor
{
    private readonly byte[] key;
    private readonly byte[] salt;
    private readonly int iterations;

    public AesGcmDecryptor(byte[] key, byte[] salt, int iterations)
    {
        this.key = key;
        this.salt = salt;
        this.iterations = iterations;
    }

    public string Decrypt(string encryptedHex)
    {
        // Convert hexadecimal string to byte array
        var encryptedBytes = Convert.FromHexString(encryptedHex);

        // Extract IV (first 12 bytes)
        var iv = new byte[12];
        Array.Copy(encryptedBytes, iv, 12);

        // Extract encrypted data (remaining bytes)
        var encryptedData = new byte[encryptedBytes.Length - 12];
        Array.Copy(encryptedBytes, 12, encryptedData, 0, encryptedBytes.Length - 12);

        // Derive key using PBKDF2
        var derivedKey = new Rfc2898DeriveBytes(key, salt, iterations).GetBytes(32);

        // Create AesGcm instance
        using var aesGcm = new AesGcm(derivedKey);

        // Decrypt data
        var decryptedBytes = aesGcm.Decrypt(iv, encryptedData, null);

        // Convert decrypted bytes to string
        return Encoding.UTF8.GetString(decryptedBytes);
    }
}

